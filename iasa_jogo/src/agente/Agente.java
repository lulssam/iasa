package agente;import ambiente.Ambiente;import ambiente.Evento;/** * Representa um agente que interage com um ambiente */public class Agente {    private Ambiente ambiente;    private Controlo controlo;    /**     * Construtor     *     * @param ambiente O ambiente que o agente opera     * @param controlo O controlo que define o comportamento do agente     */    public Agente(Ambiente ambiente, Controlo controlo) {        this.ambiente = ambiente;        this.controlo = controlo;    }    /**     * Criamos a variavel local percepcao para evitar o acoplamento. No diagrama de atividade,     * as setas demomstram o fluxo de controlo. */    public void executar() {        Percepcao percepcao = percepcionar();        Accao accao = controlo.processar(percepcao);        actuar(accao);    }    /**     * Obtém/Observa um evento e gera uma percepção     *     * @return Percepcao(evento)     */    protected Percepcao percepcionar() {        Evento evento = ambiente.observar();        return new Percepcao(evento);    }    /**     * Executar ação sobre ambiente. Verificar se comando existe antes de o actuar.     *     * @param accao Ação a executar     */    protected void actuar(Accao accao) {        if (accao != null) {            this.ambiente.executar(accao.getComando());        }    }}